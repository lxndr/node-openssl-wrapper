{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["\nimport {spawn} from 'child_process';\n\nconst isFunction = maybeFunction => typeof maybeFunction === 'function';\n\nconst expectedStderrForAction = {\n  'cms.verify': /^verification successful/i,\n  'genrsa': /^generating/i,\n  'pkcs12': /^mac verified ok/i,\n  'pkcs12.export': /^$/i,\n  'req.new': /^generating/i,\n  'req.verify': /^verify ok/i,\n  'rsa': /^writing rsa key/i,\n  'smime.verify': /^verification successful/i,\n  'x509.req': /^signature ok/i\n};\n\nexport default function exec(action, maybeBuffer, maybeOptions, maybeCallback) {\n  // Support option re-ordering\n  let buffer = maybeBuffer;\n  let options = maybeOptions;\n  let callback = maybeCallback;\n  if (!Buffer.isBuffer(buffer)) {\n    callback = options;\n    options = buffer;\n    buffer = false;\n  }\n  if (isFunction(options)) {\n    callback = options;\n    options = {};\n  }\n\n  // Build initial params with passed action\n  const params = action.split('.').map((value, key) => (!key ? value : `-${value}`));\n  Object.keys(options).forEach(key => {\n    if (options[key] === false) {\n      params.push(key);\n    } else if (options[key] === true) {\n      params.push(`-${key}`);\n    } else {\n      if (Array.isArray(options[key])) {\n        options[key].forEach(value => {\n          params.push(`-${key}`, value);\n        });\n      } else {\n        params.push(`-${key}`, options[key]);\n      }\n    }\n  });\n\n  // Actually spawn openssl command\n  const openssl = spawn('openssl', params);\n  const outResult = [];\n  let outLength = 0;\n  const errResult = [];\n  let errLength = 0;\n\n  openssl.stdout.on('data', data => {\n    outLength += data.length;\n    outResult.push(data);\n  });\n\n  openssl.stderr.on('data', data => {\n    errLength += data.length;\n    errResult.push(data);\n  });\n\n  openssl.on('close', code => {\n    const stdout = Buffer.concat(outResult, outLength);\n    const stderr = Buffer.concat(errResult, errLength).toString('utf8');\n\n    let err = new Error(stderr);\n    err.code = code;\n\n    const expectedStderr = expectedStderrForAction[action];\n    if (!code && expectedStderr && stderr.match(expectedStderr)) {\n      err = null;\n    }\n\n    if (typeof callback === 'function') {\n      callback.apply(null, [err, stdout]);\n    }\n  });\n\n  if (buffer) {\n    openssl.stdin.write(buffer);\n  }\n\n  openssl.stdin.end();\n\n  return openssl;\n}\n\nexport {exec};\n"]}